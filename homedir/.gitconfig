[push]
    # Defines the action git push should take if no refspec is given (whether
    # from the command-line, config, or elsewhere). Different values are
    # well-suited for specific workflows; for instance, in a purely central
    # workflow (i.e. the fetch source is equal to the push destination),
    # upstream is probably what you want. Possible values are:
    #  - 'nothing' - do not push anything (error out) unless a refspec is given.
    #    This is primarily meant for people who want to avoid mistakes by always
    #    being explicit.
    #  - 'current' - push the current branch to update a branch with the same
    #    name on the receiving end. Works in both central and non-central
    #    workflows.
    #  - 'upstream' - push the current branch back to the branch whose changes are
    #    usually integrated into the current branch (which is called
    #    @{upstream}). This mode only makes sense if you are pushing to the same
    #    repository you would normally pull from (i.e. central workflow).
    #  - 'simple' - pushes the current branch with the same name on the remote.
    #    If you are working on a centralized workflow (pushing to the same
    #    repository you pull from, which is typically origin), then you need to
    #    configure an upstream branch with the same name.
    #  - 'matching' - push all branches having the same name on both ends. This
    #    makes the repository you are pushing to remember the set of branches
    #    that will be pushed out (e.g. if you always push maint and master there
    #    and no other branches, the repository you push to will have these two
    #    branches, and your local maint and master will be pushed there).
    #    To use this mode effectively, you have to make sure all the branches
    #    you would push out are ready to be pushed out before running git push,
    #    as the whole point of this mode is to allow you to push all of the
    #    branches in one go. If you usually finish work on only one branch and
    #    push out the result, while other branches are unfinished, this mode is
    #    not for you. Also this mode is not suitable for pushing into a shared
    #    central repository, as other people may add new branches there, or
    #    update the tip of existing branches outside your control.
	default = current

[user]
	name = Lewis Gaul
    # Instruct Git to avoid trying to guess defaults for user.email and
    # user.name, and instead retrieve the values only from the configuration.
    # For example, if you have multiple email addresses and would like to use a
    # different one for each repository, then with this configuration option set
    # to true in the global config along with a name, Git will prompt you to set
    # up an email before making new commits in a newly cloned repository.
	useConfigOnly = true

[core]
	autocrlf = false
	whitespace = cr-at-eol
	eol = lf

[alias]
    lg1 = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
    lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset)%C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
    lg = !"git lg1"
    sync = !"sh -c 'git checkout --quiet HEAD; git fetch origin \"$1\":\"$1\"; git checkout --quiet -' --"

    st = status
    cm = commit
    ca = commit --amend --no-edit
    rb = !"git fetch && git rebase origin/\"$1\""
    br = branch
    ch = checkout
    df = diff
    dc = diff --cached
    ds = !"git --no-pager diff --stat"
    pu = push
    pf = push -f
    who = shortlog -s --

    aliases = !git config --get-regexp 'alias.*' | colrm 1 6 | sed 's/[ ]/ = /'

[fetch]
	prune = true

[pull]
	default = current

[merge]
	renamelimit = 10000
